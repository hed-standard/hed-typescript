import { generateIssue } from '../../src/issues/issues'
import { TagSpec } from '../../src/parser/tokenizer'

export const parsedHedTagTests = [
  {
    name: 'valid-tags',
    description: 'Valid tags with different types of forms',
    warning: false,
    tests: [
      {
        testname: 'valid-tag-one-level',
        explanation: '"Item" is a top-level-tag.',
        schemaVersion: '8.4.0',
        fullString: 'Item',
        tagSpec: new TagSpec('Item', 0, 4, ''),
        tagLong: 'Item',
        tagShort: 'Item',
        formattedTag: 'item',
        canonicalTag: 'Item',
        takesValue: false,
        error: null,
      },
      {
        testname: 'valid-tag-with-blanks',
        explanation: '" Item " has surrounding blanks.',
        schemaVersion: '8.4.0',
        fullString: ' Item ',
        tagSpec: new TagSpec('Item', 1, 5, ''),
        tagLong: 'Item',
        tagShort: 'Item',
        formattedTag: 'item',
        canonicalTag: 'Item',
        takesValue: false,
        error: null,
      },
      {
        testname: 'valid-tag-with-extension-and-blanks',
        explanation: '" Item/Blech " has surrounding blanks.',
        schemaVersion: '8.4.0',
        fullString: ' Item/Blech ',
        tagSpec: new TagSpec('Item/Blech', 1, 11, ''),
        tagLong: 'Item/Blech',
        tagShort: 'Item/Blech',
        formattedTag: 'item/blech',
        canonicalTag: 'Item/Blech',
        takesValue: false,
        error: null,
      },
      {
        testname: 'valid-Two-level-tag',
        explanation: '" Item/object " is two-level and mixed case.',
        schemaVersion: '8.4.0',
        fullString: ' Item/object ',
        tagSpec: new TagSpec('Item/object', 1, 12, ''),
        tagLong: 'Item/Object',
        tagShort: 'Object',
        formattedTag: 'item/object',
        canonicalTag: 'Item/Object',
        takesValue: false,
        error: null,
      },
      {
        testname: 'valid-tag-with-extension',
        explanation: '" Object/blech " is two-level and mixed case.',
        schemaVersion: '8.4.0',
        fullString: ' Object/blech ',
        tagSpec: new TagSpec('object/Blech', 1, 13, ''),
        tagLong: 'Item/Object/Blech',
        tagShort: 'Object/Blech',
        formattedTag: 'item/object/blech',
        canonicalTag: 'Item/Object/Blech',
        takesValue: false,
        error: null,
      },
      {
        testname: 'valid-long-tag-with-value',
        explanation: '"Property/Agent-property/Agent-trait/Age/15" is a valid long form tag with value.',
        schemaVersion: '8.4.0',
        fullString: 'Property/Agent-property/Agent-trait/Age/15"',
        tagSpec: new TagSpec('Property/Agent-property/Agent-trait/Age/15', 1, 43, ''),
        tagLong: 'Property/Agent-property/Agent-trait/Age/15',
        tagShort: 'Age/15',
        formattedTag: 'property/agent-property/agent-trait/age/15',
        canonicalTag: 'Property/Agent-property/Agent-trait/Age/15',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-long-tag-with-cascade-extension',
        explanation:
          '"Property/Agent-property/Agent-state/Agent-emotional-state/Awed/Cascade-Extension" is two-level and mixed case.',
        schemaVersion: '8.4.0',
        fullString: 'Property/Agent-property/Agent-state/Agent-emotional-state/Awed/Cascade-Extension',
        tagSpec: new TagSpec(
          'Property/Agent-property/Agent-state/Agent-emotional-state/Awed/Cascade-Extension',
          1,
          43,
          '',
        ),
        tagLong: 'Property/Agent-property/Agent-state/Agent-emotional-state/Awed/Cascade-Extension',
        tagShort: 'Awed/Cascade-Extension',
        formattedTag: 'property/agent-property/agent-state/agent-emotional-state/awed/cascade-extension',
        canonicalTag: 'Property/Agent-property/Agent-state/Agent-emotional-state/Awed/Cascade-Extension',
        takesValue: false,
        error: null,
      },
      {
        testname: 'valid-short-tag-with-cascade-extension',
        explanation:
          '"Environmental-sound/Long-Unique-Value-With/Slash-Marks" is a valid short tag with cascade extension.',
        schemaVersion: '8.4.0',
        fullString: 'Environmental-sound/Long-Unique-Value-With/Slash-Marks',
        tagSpec: new TagSpec('Environmental-sound/Long-Unique-Value-With/Slash-Marks', 1, 43, ''),
        tagLong: 'Item/Sound/Environmental-sound/Long-Unique-Value-With/Slash-Marks',
        tagShort: 'Environmental-sound/Long-Unique-Value-With/Slash-Marks',
        formattedTag: 'item/sound/environmental-sound/long-unique-value-with/slash-marks',
        canonicalTag: 'Item/Sound/Environmental-sound/Long-Unique-Value-With/Slash-Marks',
        takesValue: false,
        error: null,
      },
      {
        testname: 'valid-tag-with-two-level-value',
        explanation: '"Definition/BlueSquare/Blech" is a two-level-value.',
        schemaVersion: '8.4.0',
        fullString: 'Definition/BlueSquare/Blech',
        tagSpec: new TagSpec('Definition/BlueSquare/Blech', 1, 27, ''),
        tagLong: 'Property/Organizational-property/Definition/BlueSquare/Blech',
        tagShort: 'Definition/BlueSquare/Blech',
        formattedTag: 'property/organizational-property/definition/bluesquare/blech',
        canonicalTag: 'Property/Organizational-property/Definition/BlueSquare/Blech',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-tag-with-two-level-value-placeholder',
        explanation: '"Definition/BlueSquare/#" is a two-level value with a placeholder.',
        schemaVersion: '8.4.0',
        fullString: 'Definition/BlueSquare/#',
        tagSpec: new TagSpec('Definition/BlueSquare/#', 1, 22, ''),
        tagLong: 'Property/Organizational-property/Definition/BlueSquare/#',
        tagShort: 'Definition/BlueSquare/#',
        formattedTag: 'property/organizational-property/definition/bluesquare/#',
        canonicalTag: 'Property/Organizational-property/Definition/BlueSquare/#',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-tag-with-two-level-value-node',
        explanation: '"Definition/Blue/Red" uses node names for values.',
        schemaVersion: '8.4.0',
        fullString: 'Definition/Blue/Red',
        tagSpec: new TagSpec('Definition/Blue/Red', 1, 22, ''),
        tagLong: 'Property/Organizational-property/Definition/Blue/Red',
        tagShort: 'Definition/Blue/Red',
        formattedTag: 'property/organizational-property/definition/blue/red',
        canonicalTag: 'Property/Organizational-property/Definition/Blue/Red',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-tag-with-one-level-value-node',
        explanation: '"Definition/Blue" uses node names for values.',
        schemaVersion: '8.4.0',
        fullString: 'Definition/Blue',
        tagSpec: new TagSpec('Definition/Blue', 1, 18, ''),
        tagLong: 'Property/Organizational-property/Definition/Blue',
        tagShort: 'Definition/Blue',
        formattedTag: 'property/organizational-property/definition/blue',
        canonicalTag: 'Property/Organizational-property/Definition/Blue',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-tag-with-value-no-units',
        explanation: '" Age/5 " has a value but no units.',
        schemaVersion: '8.4.0',
        fullString: ' Age/5 ',
        tagSpec: new TagSpec(' Age/5 ', 1, 6, ''),
        tagLong: 'Property/Agent-property/Agent-trait/Age/5',
        tagShort: 'Age/5',
        formattedTag: 'property/agent-property/agent-trait/age/5',
        canonicalTag: 'Property/Agent-property/Agent-trait/Age/5',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-tag-with-value-and-units',
        explanation: '" Length/3 m " has a value and valid units.',
        schemaVersion: '8.4.0',
        fullString: ' Length/3 m ',
        tagSpec: new TagSpec(' Length/3 m ', 1, 11, ''),
        tagLong: 'Property/Data-property/Data-value/Spatiotemporal-value/Spatial-value/Size/Length/3 m',
        tagShort: 'Length/3 m',
        formattedTag: 'property/data-property/data-value/spatiotemporal-value/spatial-value/size/length/3 m',
        canonicalTag: 'Property/Data-property/Data-value/Spatiotemporal-value/Spatial-value/Size/Length/3 m',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-value-tag-with-placeholder',
        explanation: '" Label/# " is a valid tag with placeholder.',
        schemaVersion: '8.4.0',
        fullString: ' Label/# ',
        tagSpec: new TagSpec(' Label/# ', 1, 8, ''),
        tagLong: 'Property/Informational-property/Label/#',
        tagShort: 'Label/#',
        formattedTag: 'property/informational-property/label/#',
        canonicalTag: 'Property/Informational-property/Label/#',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-numeric-value-tag-no-units',
        explanation: '"Weight/30" is a valid numeric value tag.',
        schemaVersion: '8.4.0',
        fullString: 'Weight/30',
        tagSpec: new TagSpec('Weight/30', 0, 9, ''),
        tagLong: 'Property/Data-property/Data-value/Physical-value/Weight/30',
        tagShort: 'Weight/30',
        formattedTag: 'property/data-property/data-value/physical-value/weight/30',
        canonicalTag: 'Property/Data-property/Data-value/Physical-value/Weight/30',
        takesValue: true,
        error: null,
      },
      {
        testname: 'valid-numeric-scientific-value',
        explanation: '"Weight/3.0e10 kg" is a valid numeric value tag with scientific notation.',
        schemaVersion: '8.4.0',
        fullString: 'Weight/30',
        tagSpec: new TagSpec('Weight/3.0e10 kg', 0, 16, ''),
        tagLong: 'Property/Data-property/Data-value/Physical-value/Weight/3.0e10 kg',
        tagShort: 'Weight/3.0e10 kg',
        formattedTag: 'property/data-property/data-value/physical-value/weight/3.0e10 kg',
        canonicalTag: 'Property/Data-property/Data-value/Physical-value/Weight/3.0e10 kg',
        takesValue: true,
        error: null,
      },
    ],
  },
  {
    name: 'invalid-tags',
    description: 'Various invalid tags',
    warning: false,
    tests: [
      {
        testname: 'invalid-top-level-tag',
        explanation: '"Blech" is not a valid tag.',
        schemaVersion: '8.4.0',
        fullString: 'Blech',
        tagSpec: new TagSpec('Blech', 0, 6, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidTag', {
          tag: 'Blech',
          msg: 'Tag extensions must have a parent in the HED schema.',
        }),
      },
      {
        testname: 'invalid-tag-requires-value',
        explanation: '"Duration" should have a value.',
        schemaVersion: '8.4.0',
        fullString: 'Duration',
        tagSpec: new TagSpec('Duration', 0, 8, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: true,
        error: generateIssue('childRequired', {
          tag: 'Duration',
          msg: `The tag "Duration" requires a child tag, but none was provided.`,
        }),
      },
      {
        testname: 'invalid-tag-does-not-allow-extension',
        explanation: '"Sensory-event/Blech" should not have a child.',
        schemaVersion: '8.4.0',
        fullString: 'Sensory-event/Blech',
        tagSpec: new TagSpec('Sensory-event/Blech', 0, 19, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidExtension', {
          parentTag: 'Sensory-event',
          tag: 'Blech',
          msg: `The tag "Blech" is an extension, but the parent tag "Sensory-event" does not allow extensions.`,
        }),
      },
      {
        testname: 'invalid-tag-does-not-allow-cascade-extension',
        explanation: '"Event/Agent-action/Good/Time" should not allow cascade extension.',
        schemaVersion: '8.4.0',
        fullString: 'Event/Agent-action/Good/Time',
        tagSpec: new TagSpec('Event/Agent-action/Good/Time', 0, 29, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidExtension', {
          parentTag: 'Event/Agent-action',
          tag: 'Good',
          msg: `The tag "Good" is an extension, but the parent tag "Agent-action" does not allow extensions.`,
        }),
      },
      {
        testname: 'invalid-no-extension-tag-in-extension-allowed',
        explanation: '"Onset/Blech" should not have an extension.',
        schemaVersion: '8.4.0',
        fullString: 'Onset/Blech',
        tagSpec: new TagSpec('Onset/Blech', 0, 11, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: true,
        error: generateIssue('invalidExtension', {
          parentTag: 'Onset',
          tag: 'Blech',
          msg: `The tag "Blech" is an extension, but the parent tag "Onset" does not allow extensions.`,
        }),
      },
      {
        testname: 'invalid-duplicate-tag-in-path',
        explanation: '"Item/Object/Geometric-object/Blech/Object" should not reused Object.',
        schemaVersion: '8.4.0',
        fullString: 'Item/Object/Geometric-object/Blech/Object',
        tagSpec: new TagSpec('Item/Object/Geometric-object/Blech/Object', 0, 41, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: true,
        error: generateIssue('invalidParentNode', {
          parentTag: 'Item/Object/Geometric-object/Blech',
          tag: 'Object',
          msg: `The tag "Object" is a schema tag, but it appears after an extension tag "Blech".`,
        }),
      },
      {
        testname: 'invalid-top-node',
        explanation: '"InvalidEvent" is not a valid node.',
        schemaVersion: '8.4.0',
        fullString: 'InvalidEvent',
        tagSpec: new TagSpec('InvalidEvent', 0, 41, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: true,
        error: generateIssue('invalidTag', {
          tag: 'InvalidEvent',
          msg: 'Tag extensions must have a parent in the HED schema.',
        }),
      },
      {
        testname: 'invalid-tag-with-blank-in-extension',
        explanation: '" Object/blec h " has a blank in the tag extension',
        schemaVersion: '8.4.0',
        fullString: ' Object/blec h ',
        tagSpec: new TagSpec(' Object/blec h ', 1, 14, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidExtension', {
          parentTag: 'Object',
          tag: 'blec h',
          msg: `The tag extension "blec h" is not in the HED name class, so it cannot be used as a tag extension.`,
        }),
      },
      {
        testname: 'invalid-tag-should-not-have-a-placeholder',
        explanation: '"object/#" should not have a placeholder.',
        schemaVersion: '8.4.0',
        fullString: 'object/#',
        tagSpec: new TagSpec('object/#', 0, 8, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidExtension', {
          parentTag: 'object',
          tag: '#',
          msg: `The tag extension "#" is not in the HED name class, so it cannot be used as a tag extension.`,
        }),
      },
      {
        testname: 'invalid-tag-bad-parent',
        explanation: '"object/property/Red" -- property is not a child of object.',
        schemaVersion: '8.4.0',
        fullString: 'object/property/Red',
        tagSpec: new TagSpec('object/property/Red', 0, 19, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidParentNode', {
          parentTag: 'object',
          tag: 'property',
          msg: `The parent tag "Object" does not match the expected parent "undefined" in the schema.`,
        }),
      },
      {
        testname: 'invalid-tag-bad-parent-after extension',
        explanation: '"object/Junk/baloney/Red" -- Red is not a child of baloney.',
        schemaVersion: '8.4.0',
        fullString: 'object/Junk/baloney/Red',
        tagSpec: new TagSpec('object/Junk/baloney/Red', 0, 22, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidParentNode', {
          parentTag: 'object/Junk/baloney',
          tag: 'Red',
          msg: `The tag "Red" is a schema tag, but it appears after an extension tag "Junk".`,
        }),
      },
      {
        testname: 'invalid-tag-bad-unit-class',
        explanation: '"Length/2 s" has wrong unit class.',
        schemaVersion: '8.4.0',
        fullString: 'Length/2 s',
        tagSpec: new TagSpec('Length/2 s', 0, 10, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Length/2 s' }),
      },
      {
        testname: 'invalid-tag-bad-unit-plural',
        explanation: '"Frequency/3 hertzs" is not the plural of hertz.',
        schemaVersion: '8.4.0',
        fullString: 'Frequency/3 hertzs',
        tagSpec: new TagSpec('Frequency/3 hertzs', 0, 18, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Frequency/3 hertzs' }),
      },
      {
        testname: 'invalid-tag-incorrect-unit-symbol-caps',
        explanation: '"Frequency/3 hz" has unit symbol not correctly capitalized.',
        schemaVersion: '8.4.0',
        fullString: 'Frequency/3 hz',
        tagSpec: new TagSpec('Frequency/3 hz', 0, 14, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Frequency/3 hz' }),
      },
      {
        testname: 'invalid-tag-incorrect-unit-modifier caps',
        explanation: '"Frequency/3 KHz" has unit modifier not correctly capitalized.',
        schemaVersion: '8.4.0',
        fullString: 'Frequency/3 KHz',
        tagSpec: new TagSpec('Frequency/3 KHz', 0, 15, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Frequency/3 KHz' }),
      },
      {
        testname: 'invalid-tag-non-SI-unit-modified',
        explanation: '"Time-value/1 millihour" has a non-SI unit with unit modifier.',
        schemaVersion: '8.4.0',
        fullString: 'Time-value/1 millihour',
        tagSpec: new TagSpec('Time-value/1 millihour', 0, 22, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Time-value/1 millihour' }),
      },
      {
        testname: 'invalid-tag-bad-unit-symbol-modifier',
        explanation: '"Speed/100 Mkph" has a bad unit symbol.',
        schemaVersion: '8.4.0',
        fullString: 'Speed/100 Mkph',
        tagSpec: new TagSpec('Speed/100 Mkph', 0, 14, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Speed/100 Mkph' }),
      },
      {
        testname: 'invalid-tag-bad-units-double-blank',
        explanation: '"Length/5  m" has a double blank.',
        schemaVersion: '8.4.0',
        fullString: 'Length/5  m',
        tagSpec: new TagSpec('Length/5  m', 0, 11, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Length/5  m' }),
      },
      {
        testname: 'invalid-tag-bad-unit-capitalization',
        explanation: '"Time-value/5 Milliseconds" is not a valid unit.',
        schemaVersion: '8.4.0',
        fullString: 'Time-value/5 Milliseconds',
        tagSpec: new TagSpec('Length/2 s', 0, 25, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('unitClassInvalidUnit', { tag: 'Length/2 s' }),
      },
      {
        testname: 'invalid-tag-value-no-units',
        explanation: '"Label/Blec h" does not have a valid value.',
        schemaVersion: '8.4.0',
        fullString: 'Label/Blec h',
        tagSpec: new TagSpec('Label/Blec h', 0, 12, ''),
        tagLong: undefined,
        tagShort: undefined,
        formattedTag: undefined,
        canonicalTag: undefined,
        takesValue: false,
        error: generateIssue('invalidValue', {
          tag: 'Label/Blec h',
          msg: 'Tag "Label" has value classes [nameClass] but its value "Blec h" is not in any of them.',
        }),
      },
    ],
  },
  {
    name: 'name-space-tests',
    description: 'tests with colons in various places',
    warning: false,
    tests: [
      {
        testname: 'valid-date-time',
        explanation: '"Creation-date/2009-04-09T12:04:14" is valid and no namespace.',
        schemaVersion: '8.4.0',
        tagPrefix: null,
        fullString: 'Creation-date/2009-04-09T12:04:14',
        tagSpec: new TagSpec('Creation-date/2009-04-09T12:04:14', 0, 33, ''),
        tagLong: 'Property/Informational-property/Metadata/Creation-date/2009-04-09T12:04:14',
        tagShort: 'Creation-date/2009-04-09T12:04:14',
        formattedTag: 'property/informational-property/metadata/creation-date/2009-04-09t12:04:14',
        canonicalTag: 'Property/Informational-property/Metadata/Creation-date/2009-04-09T12:04:14',
        takesValue: true,
        error: null,
      },
    ],
  },
]
